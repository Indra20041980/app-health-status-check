// <auto-generated />
using System;
using DeepCheck.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DeepCheck.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250825224624_SlimingDownDatabaseEntities")]
    partial class SlimingDownDatabaseEntities
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.8");

            modelBuilder.Entity("DeepCheck.Entities.TestRun", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("ElapsedMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("RunMethod")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TestRuns", (string)null);
                });

            modelBuilder.Entity("DeepCheck.Entities.TestRunStep", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<long>("ElapsedMs")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FailReason")
                        .HasMaxLength(2000)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("TestRunId")
                        .HasColumnType("TEXT");

                    b.Property<string>("TestStepName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("TestRunId");

                    b.ToTable("TestRunSteps", (string)null);
                });

            modelBuilder.Entity("DeepCheck.Entities.TestRunStep", b =>
                {
                    b.HasOne("DeepCheck.Entities.TestRun", "TestRun")
                        .WithMany("Steps")
                        .HasForeignKey("TestRunId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TestRun");
                });

            modelBuilder.Entity("DeepCheck.Entities.TestRun", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
